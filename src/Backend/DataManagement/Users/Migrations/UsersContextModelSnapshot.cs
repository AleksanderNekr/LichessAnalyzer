// <auto-generated />
using System;
using Backend.DataManagement.Users;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.DataManagement.Users.Migrations
{
    [DbContext(typeof(UsersContext))]
    partial class UsersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.DataManagement.Users.Entities.AnalyticsList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("list_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_players_lists");

                    b.HasIndex("UserId");

                    b.HasIndex("Name", "UserId")
                        .IsUnique()
                        .HasDatabaseName("uq_names_per_user");

                    b.ToTable("players_lists", null, t =>
                        {
                            t.HasCheckConstraint("ch_name_len_range", "LENGTH(name) >= 1");
                        });
                });

            modelBuilder.Entity("Backend.DataManagement.Users.Entities.Player", b =>
                {
                    b.Property<Guid>("ContainingListId")
                        .HasColumnType("uuid")
                        .HasColumnName("list_id");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("player_id");

                    b.HasKey("ContainingListId", "Id")
                        .HasName("pk_contains");

                    b.ToTable("contains", (string)null);
                });

            modelBuilder.Entity("Backend.DataManagement.Users.Entities.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("club_id");

                    b.Property<Guid>("OrganiserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_organises");

                    b.HasIndex("OrganiserId");

                    b.ToTable("organises", (string)null);
                });

            modelBuilder.Entity("Backend.DataManagement.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("MaxListsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30)
                        .HasColumnName("max_lists_count");

                    b.Property<int>("MaxPlayersInList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(100)
                        .HasColumnName("max_players_in_list");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("uq_users_names");

                    b.ToTable("users", null, t =>
                        {
                            t.HasCheckConstraint("ch_max_lists_val_range", "max_lists_count >= 5 AND max_lists_count <= 100");

                            t.HasCheckConstraint("ch_max_players_val_range", "max_players_in_list >= 5 AND max_players_in_list <= 500");
                        });
                });

            modelBuilder.Entity("Backend.DataManagement.Users.Entities.AnalyticsList", b =>
                {
                    b.HasOne("Backend.DataManagement.Users.Entities.User", "Creator")
                        .WithMany("AnalyticsLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_player_lists_by_user");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Backend.DataManagement.Users.Entities.Player", b =>
                {
                    b.HasOne("Backend.DataManagement.Users.Entities.AnalyticsList", "ContainingList")
                        .WithMany("ListedPlayers")
                        .HasForeignKey("ContainingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contains_by_lists");

                    b.Navigation("ContainingList");
                });

            modelBuilder.Entity("Backend.DataManagement.Users.Entities.Team", b =>
                {
                    b.HasOne("Backend.DataManagement.Users.Entities.User", "Organiser")
                        .WithMany("OrganisedTeams")
                        .HasForeignKey("OrganiserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organises_by_user");

                    b.Navigation("Organiser");
                });

            modelBuilder.Entity("Backend.DataManagement.Users.Entities.AnalyticsList", b =>
                {
                    b.Navigation("ListedPlayers");
                });

            modelBuilder.Entity("Backend.DataManagement.Users.Entities.User", b =>
                {
                    b.Navigation("AnalyticsLists");

                    b.Navigation("OrganisedTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
